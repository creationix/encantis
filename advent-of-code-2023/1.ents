-- challenge 1

-- The newly-improved calibration document consists of lines of text; each line originally contained a specific calibration value that the Elves now need to recover. On each line, the calibration value can be found by combining the first digit and the last digit (in that order) to form a single two-digit number.

-- For example:

-- 1abc2
-- pqr3stu8vwx
-- a1b2c3d4e5f
-- treb7uchet

-- In this example, the calibration values of these four lines are 12, 38, 15, and 77. Adding these together produces 142.

-- Consider your entire calibration document. What is the sum of all of the calibration values?

-- States for our state machine
define FIND_FIRST_DIGIT = 0
define FIND_SECOND_DIGIT = 1
define FIND_NEWLINE = 2
-- Useful ASCII codes
define CHAR_NEWLINE = 10
define CHAR_ZERO = 48
define CHAR_NINE = 57

-- The function that will be called by the host
export "calibration-sum" func (input:[u8]) -> sum:i32
  local state: i32 = 0

  local first_digit: i32 = -1
  local second_digit: i32 = -1

  -- Loop over the bytes in the input
  for byte in input do

    -- Process a line every time we see a newline
    if byte == CHAR_NEWLINE then

      -- Add the digits to the sum if we have them.
      if first_digit >= 0 then
        -- Add the first digit times 10.
        sum += first_digit * 10
        -- Add the second digit if we have it.
        if second_digit >= 0 then
          sum += second_digit
        -- otherwise add the first digit again.
        else
          sum += first_digit
        end
      end
      -- Update state to look for first digit again.
      state = FIND_FIRST_DIGIT
    elif state == FIND_FIRST_DIGIT then
      if byte >= CHAR_ZERO and byte <= CHAR_NINE then
        first_digit = byte - CHAR_ZERO
        state = FIND_SECOND_DIGIT
      end
    elif state == FIND_SECOND_DIGIT then
      if byte >= CHAR_ZERO and byte <= CHAR_NINE then
        second_digit = byte - CHAR_ZERO
        state = FIND_NEWLINE
      end
    end

  end

  return sum
end
