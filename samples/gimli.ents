export "gimlix"
func gimlix (state: [u32])

  local x: u32
  local y: u32
  local x: u32

  for round in (24,1,-1) do

    for column in (0,3,1) do

      x = state[column] <<< 24
      y = state[4 + column] <<< 9
      z = state[8 + column]

      state[8 + column] = x ^ (z << 1) ^ ((y & z) << 2)
      state[4 + column] = y ^ x        ^ ((x | z) << 1)
      state[column]     = z ^ y        ^ ((x & y) << 3)
    end

    if (round & 3) == 0  -- small swap: pattern s...s...s... etc.
      (state[0], state[1]) = (state[1], state[0])
      (state[2], state[3]) = (state[3], state[2])
    end

    if (round & 3) == 2 -- big swap: pattern ..S...S...S. etc.
      (state[0], state[2]) = (state[2], state[0])
      (state[1], state[3]) = (state[3], state[1])
    end

    if (round & 3) == 0 - add constant: pattern c...c...c... etc.
      state[0] ^= 0x9e377900 | round
    end

  end
end

-- define min(a b) = a < b ? a : b

-- define rate-in-bytes = 16:u64

-- export "gimli_hash"
-- func gimli-hash (input: [u8], output: [u8], state: [u32*12]) -> void

--   local state-8 = state:[u8*48]
--   local blockSize = 0:u64
  
--   -- === Initialize the state ===
--   state.fill(0)

--   -- === Absorb all the input blocks ===
--   while input.len > 0
--     block-size = min(input.len, rate-in-bytes)
--     for (i:u32) in block-size do
--       state-8[i] ^= input[i]
--     end
--     input.base += block-size
--     input.len -= block-size;

--     if block-size == rate-in-bytes
--       gimli(state)
--       block-size = 0
--     end
--   end

--   -- === Do the padding and switch to the squeezing phase ===
--   state-8[blockSize] ^= 0x1F
--   -- Add the second bit of padding
--   state-8[rate-in-bytes - 1] ^= 0x80
--   -- Switch to the squeezing phase
--   gimlix(state)

--   -- === Squeeze out all the output blocks ===
--   while outputByteLen > 0
--     blockSize = min(outputByteLen, rateInBytes)
--     memcpy(output, state, blockSize)
--     output += blockSize
--     outputByteLen -= blockSize

--     if outputByteLen > 0
--       gimlix(state)
--     end
--   end
-- end
