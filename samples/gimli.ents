export "gimlix"
func gimlix (state: [u32*12])

  local y: u32
  local x: u32

  for round in (24,1,-1) do

    for column in (0,3,1) do

      x = state[column] <<< 24
      y = state[4 + column] <<< 9
      z = state[8 + column]

      state[8 + column] = x ^ (z << 1) ^ ((y & z) << 2)
      state[4 + column] = y ^ x        ^ ((x | z) << 1)
      state[column]     = z ^ y        ^ ((x & y) << 3)
    end

    if (round & 3) == 0 then -- small swap: pattern s...s...s... etc.
      (state[0], state[1]) = (state[1], state[0])
      (state[2], state[3]) = (state[3], state[2])
    end

    if (round & 3) == 2 then -- big swap: pattern ..S...S...S. etc.
      (state[0], state[2]) = (state[2], state[0])
      (state[1], state[3]) = (state[3], state[1])
    end

    if (round & 3) == 0 then -- add constant: pattern c...c...c... etc.
      state[0] ^= 0x9e377900 | (24 -round)
    end

  end
end

define min(a b) = a < b ? a : b

define rate-in-bytes = 16:u64

export "gimli_hash"
func gimli-hash (input: [u8], output: [u8], state: [u32*12]) -> ()

  local state-8 = state:[u8*48]
  local block-size = 0:u64
  
  -- Initialize the state
  state.fill(0)

  -- Absorb all the input blocks
  while input.len > 0 do


    block-size = min(input.len, rate-in-bytes)
    for (i:u32) in block-size do
      state-8[i] ^= input[i]
    end
    input.ptr += block-size
    input.len -= block-size

    if block-size == rate-in-bytes then
      gimlix(state)
      block-size = 0
    end
  end

  -- Do the padding and switch to the squeezing phase
  state-8[block-size] ^= 0x1F
  -- Add the second bit of padding
  state-8[rate-in-bytes - 1] ^= 0x80
  -- Switch to the squeezing phase
  gimlix(state)

  -- Squeeze out all the output blocks
  while output.len > 0 do
    local squeezeBlockSize = min(output.len, rate-in-bytes)
    -- Assuming memcpy(dest_ptr, src_ptr, num_bytes) or similar:
    -- Use state-8 (byte view) as source and output.ptr as destination pointer.
    memcpy(output.ptr, state-8.ptr, squeezeBlockSize)
    output.ptr += squeezeBlockSize
    output.len -= squeezeBlockSize
    if output.len > 0 then
      gimlix(state)
    end
  end
end
