export "memory"
memory 1

import "print"
func print (str:[u8])

-- Dead simple memory allocator that bumps the heap offset
global heap-offset:u32 = %data-end%
func alloc(size:u32) -> [u8]
    local slice = (heap-offset, size) as [u8]
    heap-offset += size
    return slice
end

func realloc(slice:[u8], size:u32) -> [u8]
    if slice.ptr+slice.len == heap-offset then
        -- If the slice is at the end of the heap, just extend it
        local new_slice = (slice.ptr, size) as [u8]
        heap-offset += size - slice.len
        return new_slice
    else
        -- Otherwise, we need to allocate a new slice and copy the old data
        local new_slice = alloc(size)
        memcpy(new_slice.ptr, slice)  -- Copy old data to new slice
        return new_slice
    end
end

func write-str(dest:[u8], str:[u8]) -> [u8]
  -- Shortcut for writing empty strings
  return dest when str.len == 0
  -- Remember the original length of dest
  local original-len = dest.len
  -- Ensure we have space to write str
  dest = realloc(dest, dest.len + str.len)
  -- Create a target slice for convenience
  local target:*u8 = dest.ptr + original-len
  -- Now we can simply copy the string into the destination slice
  for i in str.len do target[i] = str[i] end
  -- Return the updated destination slice
  return dest
end

func write(dest:[u8], val:Nibs) -> [u8]
  return write-str(dest, val) when val is String
  return write-i32(dest, val) when val is Number
  return write-str(dest, "INVALID NIBS TYPE")
end

func write-i32(dest:[u8], num:i32) -> [u8]
  -- Ensure we're at the end of the heap
  dest = realloc(dest, dest.len)
  -- Now we can simply write past this slice as long as we update the heap-offset when done.

  if num == 0 then
    -- Special case for zero
    dest[dest.len++] = '0' as u8
  else
    -- Add negative sign if the number is negative
    if num < 0 then
      dest[dest.len++] = '-' as u8 -- Add the negative sign
      num = -num -- Make the number positive for further processing
    end

    local first = dest.len

    -- write the digits backwards
    while num > 0 do
      dest[dest.len++] = ((num % 10) + '0') as u8  -- Convert digit to ASCII
      num /= 10 -- find the next digit
    end

    -- Reverse the digits in place
    local last = dest.len - 1
    while first < last do
      dest[first], dest[last] = dest[last], dest[first]
      first++
      last--
    end
  end

  -- Update the heap offset to point to the end of the new string
  heap-offset = dest.ptr + dest.len

  return dest
end

export "_start"
func()
    local name = "World!"
    local greeting = "Hello, "
    
    local message = alloc(0)
      |> write-str(%, greeting)
      |> write-str(%, name)
      |> write-str(%, " The answer is ")
      |> write-i32(%, 42)

    -- Print the final concatenated string
    print(message)

    local message2 = alloc(0)
      |> write-nibs(%, 123)
      |> write-nibs(%, "numbers are colors")
    print(message2)
end