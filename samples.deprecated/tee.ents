-- poor man's tee
-- Outputs to stderr and stdout whatever comes in stdin

import "wasi_unstable" (
  "fd_read"   func wasi-fd-read   (Fd IoVec OutSize) -> Result
  "fd_write"  func wasi-fd-write  (Fd IoVec OutSize) -> Result
  "proc_exit" func wasi-proc-exit (ExitCode)
)

type Fd = i32
type Size = u32
type IoVec = [[u8]]
type OutSize = *Size
type Result = i32
type ExitCode = i32

define stdin = 0 as Fd
define stdout = 1 as Fd

export "memory"
memory 1

global ioVec: *[u8] = 0
global ioBuffer: [u8*1024]

export "_start"
func main () -> i32

  local res: Result

  loop start
    block
      ioVec.* = ioBuffer

      -- Read up to ioBuffer.len bytes from stdin.
      res = wasi-fd-read(stdin, (ioVec, 1) as IoVec, ioVec.len)

      -- Break out of the loop if fd_read returned an error, or 0 bytes were read.
      br-if res != 0 or ioVec.len == 0

      -- Write the bytes read from stdin to stdout.
      res = wasi-fd-write(stdout, (ioVec, 1) as IoVec, ioVec.len)
      br-if res != 0

      -- Write the bytes read from stdin to stderr.
      res = wasi-fd-write(stderr, (ioVec, 1) as IoVec, ioVec.len)
      br-if res != 0

      br-start
    end
  end

end