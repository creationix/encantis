export "memory"
memory 1

import "log"
func log (str:Nibs)

export "_start"
func ()
    -- This string literal is actually written to the data section
    -- as [u8], but the string part is also encoded as Nibs.
    log("Hello World")

    -- Because of this, any type that Nibs can encode is allowed!
    -- This will be encoded to a single encantis slice and sent to
    -- the host as two integers.
    log({
      ðŸ“› = "Tim"
      ðŸ§“ = 41
      ðŸŽ¨ = true
      ðŸ”¢ = [1 1 2 3 5 8]
    })
end

-- Likewise, Encantis functions can accept Nibs parameters
export "process"
func (data:Nibs) -> i32
  -- Dynamic types can have their type checked at runtime
  if data is Map then
    -- type is now Map
    for key/value in data do
    
    end
    -- dereference
    data.foo -- this is type Nibs|Undefined
    data[100] -- can index with any expression
  elif data is List then
    for index/value in data do
    end
    data[3]
    #data -- get count of list
  elif data is Float then
    data as f32
    ...
  elif data is Integer then
    data as i32
    ...
  elif data is Boolean then
    data as i32
    ...
  elif data is Nil then
    ...
  elif data is String then
    ...
  elif  data is Binary then
    data
    ...
  else
    ...
  end
end



end

-- Map Literal Syntax
"{" ( ( Literal | Identifier | "[" Expression "]" ) "=" Expression ","? )* "}"

-- List Literal Syntax
"[" (Expression ","? )* "]"

-- Boolean Literal Syntax
( "true" | "false" )

-- Nil Literal Syntax
"nil"

-- String Literal Syntax (single or double quotes)
'"' ( "\xx" hex escape | '\"' | "\r" | "\n" | "\t" | not ('"' | NEWLINE) )* "'"
"'" ( "\xx" hex escape | "\'" | "\r" | "\n" | "\t" | not ("'" | NEWLINE) )* '"'

-- Crazy idea!
-- Template Literal Syntax
"`" ( "${" expression "}" | not "`" )* "`"